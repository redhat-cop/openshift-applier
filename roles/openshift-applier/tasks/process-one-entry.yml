---

- name: "Set default values"
  set_fact:
    target_namespace: ''
    file: "{{ content.file | default('') }}"
    file_f_option: ''
    file_action: "{{ content.file_action | default(default_file_action) }}"
    template: "{{ content.template | default('') }}"
    template_f_option: ''
    template_action: "{{ content.template_action | default(default_template_action) }}"
    params: "{{ content.params | default('') }}"
    process_local: ''

- name: "Set file_action and template_action to delete when in deprovision mode"
  set_fact:
    file_action: "delete"
    template_action: "delete"
  when:
  - not provision|bool

- name: "Fail if template but no params is specified"
  fail:
    msg: "Template specified, but no params file supplied"
  when:
  - template|trim != ''
  - params|trim == ''

- name: "Check if params file exists (if applicable)"
  stat:
    path: "{{ tmp_inv_dir }}{{ params }}"
  ignore_errors: yes
  register: params_result
  when:
  - params|trim != ''

- name: "Fail if params file doesn't exist (if applicable)"
  fail:
    msg: "{{ params }} - params file doesn't exist."
  when:
  - params|trim != ''
  - params_result.stat.exists == False

- name: "Determine location for the 'file' (if applicable)"
  vars:
    path: "{{ file }}"
  import_tasks: check-file-location.yml
  when:
  - file|trim != ''

- name: "Set 'file' values (if applicable)"
  set_fact:
    file: "{{ file_path }}"
    file_f_option: "{{ option_f }}"
  when:
  - file|trim != ''

- name: "Determine location for the 'template' (if applicable)"
  vars:
    path: "{{ template }}"
  import_tasks: check-file-location.yml
  when:
  - template|trim != ''

- name: "Set 'template' values (if applicable)"
  set_fact:
    template: "{{ file_path }}"
    template_f_option: "{{ option_f }}"
  when:
  - template|trim != ''

- name: "Set the target namespace option if supplied"
  set_fact:
    target_namespace: "-n {{ content.namespace }}"
  when:
  - content.namespace is defined
  - content.namespace|trim != ''

- name: "Include any pre-processing role(s) before applying file and/or template"
  include_tasks: pre-post-step.yml
  with_items:
  - "{{ content.pre_steps | default('') }}"
  loop_control:
    loop_var: step

- name: "{{ file_action | capitalize }} OpenShift objects based on static files for '{{ entry.object}} : {{ content.name | default(file | basename) }}'"
  command: >
    oc {{ file_action }} {{ target_namespace }} -f {{ file }} {{ (file_action == 'delete') | ternary(' --ignore-not-found', '') }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  register: command_result
  failed_when:
  - command_result.rc != 0
  - "'AlreadyExists' not in command_result.stderr"
  when:
  - file|trim != ''

- name: "{{ template_action | capitalize }} OpenShift objects based on template with params for '{{ entry.object}} : {{ content.name | default(template | basename) }}'"
  shell: >
    oc process \
      {{ process_local }} \
      {{ template_f_option }} {{ template }} \
      {{ target_namespace }} \
      --param-file={{ tmp_inv_dir }}{{ content.params }} | \
    oc {{ template_action }} {{ target_namespace }} -f - {{ (template_action == 'delete') | ternary(' --ignore-not-found', '') }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  register: command_result
  failed_when:
  - command_result.rc != 0
  - "'AlreadyExists' not in command_result.stderr"
  when:
  - template|trim != ''
  - params|trim != ''
  - not params_result.stat.isdir

- name: "{{ template_action | capitalize }} OpenShift objects based on template with params for '{{ entry.object}} : {{ content.name | default(template | basename) }}'"
  shell: >
    oc process \
      {{ process_local }} \
      {{ template_f_option }} {{ template }} \
      {{ target_namespace }} \
      --param-file={{ item }} | \
    oc {{ template_action }} {{ target_namespace }} -f - {{ (template_action == 'delete') | ternary(' --ignore-not-found', '') }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"
  register: command_result
  failed_when:
  - command_result.rc != 0
  - "'AlreadyExists' not in command_result.stderr"
  with_fileglob:
  - "{{ tmp_inv_dir }}{{ content.params }}/*"
  when:
  - template|trim != ''
  - params|trim != ''
  - params_result.stat.isdir

- name: "Include any post-processing role(s) after applying file and/or template"
  include_tasks: pre-post-step.yml
  with_items:
  - "{{ content.post_steps | default('') }}"
  loop_control:
    loop_var: step
